from DataStorage import CredentialList
from Outlook     import Session


commands = {
    "help"   : "Lists potential commands          Syntax: help",
    "show"   : "Shows all of the data collected   Syntax: show <datatype>",
    "export" : "Exports selected data.            Syntax: export <datatype> <filname> ",
    "import" : "Imports data from selected file.  Syntax: import <filename>",
    "exit"   : "Exit the program.                 Syntax: exit",
    "tools"  : "Lists all available tools.        Syntax: tools",
    "use"    : "Uses specified tool.              Syntax: use <tool>",
    "add"    : "Adds a specified dataType.        Syntax: add <dataType>"
    }

tools = {
    "outlook"    : "Includes modules such as spraypass, verifycred, and accountspray all leveraging the EWS infrasturcture."
}

outlook = {
    "spraypass"    : "Bruteforce single account using EWS Multifactor Bypass and wordlist.",
    "verifycred"   : "Verifies credential using EWS Multifactor Bypass.",
    "accountSpray" : "Bruteforces a list of accounts using a password list. WARNING: VERY NOISY",
    "exit"         : "Exit the program.                 Syntax: exit",
}

creds = CredentialList()

def helpInfo(commands):
    for command in commands:
        print('{0:10} : {1:40}'.format(command, commands[command]))

#######             This function is not complete, still needs to actually display the data   #######
def saveAll():
    creds.exportFile("/sec/python/capstone/lastSession/credentials.txt")

def exitProg():
    while True:
        saveState = raw_input("Would you like to save the data that you have collected? (y/n): ")
        if(saveState == 'y'):
            saveAll(creds)
            exit()
        elif(saveState == 'n'):
            print("Data not saved.")
            exit()
        else:
            print("Invalid option entered, please enter either 'y' or 'n'. ")

def show(command):
    try:
        dataType = command[1]
    except IndexError:
        print("Cannot be displayed because INVALID NUMBER OF ARGUMENTS.!")
        print("Syntax for 'show' is: show <datatype>")
        return False

    if(dataType == "credentials"):
        creds.displayAll()
        return True
    elif(dataType == "users"):
        print("Not Implimented Yet")
        return True
    elif(dataType == "addump"):
        print("Not Implimented Yet")
        return True
    elif(dataType == "passlist"):
        print("Not Implimented Yet")
        return True
    elif(dataType == "domain"):
        print("Not Implimented Yet")
        return True
    else:
        print("That dataType is not supported. Please try again or 'help' for more information.")
        return False

def export(command):
    try:
        dataType = command[1]
        filename = command[2]

    except IndexError:
        print("Cannot be displayed because INVALID NUMBER OF ARGUMENTS.!")
        print("Syntax for 'export' is: export <datatype> <filename>")
        return False

    if(dataType == "credentials"):
        creds.exportFile(filename)
        return True
    elif(dataType == "users"):
        print("Not implimented yet.")
        return True
    elif(dataType == "addump"):
        print("Not implimented yet.")
        return True
    elif(dataType == "passlist"):
        print("Not implimented yet.")
        return True
    elif(dataType == "domain"):
        print("Not implimented yet.")
        return True
    else:
        print("That is an invalid command, please try again or 'help' for more information.")
        return False

def importData(command):
    # Check to make sure the command has at least 2 arguments.
    try:
        filename = command[1]
    except IndexError:
        print(filename + " was NOT succesfully imported due to INVALID NUMBER OF ARGUMENTS.!")
        print("Syntax for 'import' is: import <filename>")
        return False

    # If there are at least 2 arguments, run import. Throw error if something breaks.
    try:
        creds.importFile(filename)
        print(filename + " was succesfully imported!")
        return True
    except IOError:
       print(filename + " was NOT succesfully imported because that FILE DOES NOT EXIST")
       return False

# This is only going to support credentials for the time being
def addData(command):
    try:
        if command[1] == "credential":
            nUser = raw_input("Username: ")
            nPass = raw_input("Password: ")
            nDomain = raw_input("Domain: ")
            nVerified = False
            nEmailPull = False
            nAdGroups = ""

            creds.addCred(str(nUser), str(nPass), str(nDomain), str(nVerified), str(nEmailPull), str(nAdGroups))
            return True

        else:
            print("Sorry, that dataType is not yet supported!")
            return False

    except IndexError:
        print("Add could not be executed because of an INVALID NUMBER OF ARGUMENTS!")
        print("Syntax for 'add' is: add <dataType>")
        return False

def getCommand(tool):
    while(True):
        rawCommand = raw_input(tool + "-> ").split(' ')
        if(rawCommand[0] in commands):
            return rawCommand
        elif(rawCommand[0] in outlook):
            return rawCommand
        else:
            print("That is an invalid command, please try again or 'help' for more information.")

def executeCommand(command):
    if(command[0] == "show"):
        commandSuccess = show(command)
        return commandSuccess, tool
    elif(command[0] == "export"):
        commandSuccess = export(command)
        return commandSuccess, tool
    elif(command[0] == "import"):
        commandSuccess = importData(command)
        return commandSuccess, tool
    elif(command[0] == "add"):
        commandSuccess = addData(command)
        return commandSuccess, tool
    elif(command[0] == "help"):
        print(' ')
        print('{0:25}  :  {1:100}'.format("Command", "Description"))
        print('-'*125)
        for item in commands:
            print('{0:15}  :  {1:100}'.format(item, commands[item]))
        print(' ')
        return True, tool
    elif(command[0] == "exit"):
        exitProg(data)
        return True, tool
    elif(command[0] == "tools"):
        print(' ')
        print('{0:25}  :  {1:100}'.format("Tool Name", "Description"))
        print('-'*125)
        for item in tools:
            print('{0:25}  :  {1:100}'.format(item, tools[item]))
        print(' ')
        return True, tool
    elif(command[0] == "use"):
        try:
            return True, command[1]
        except IndexError:
            print("Cannot 'Use', due to INVALID NUMBER OF ARGUMENTS.!")
            print("Syntax for 'use' is: use <tool>")
            return False, tool

def executeOutlook(command):
    try:
        if(command[0] == "spraypass"):
             # If the username isn't in data, add it.
             print("Not implimented")
        elif(command[0] == "verifycred"):
            username = raw_input("What user's credential would you like to verify? ")
            while not creds.searchUser(username):
                username = raw_input("That user was not stored. Please enter a valid user or 'cancel'. ")
                if username == "cancel":
                    return False, "Outlook"

            password = creds.getPassword(username)
            print("Single account mode selected")
            valid = test_single_mode(domain, username, password)
            if valid:
                creds.setVerify(username, "Valid")
            else:
                creds.setVerify(username, "Invalid")

            return True, "Outlook"
        elif(command[0] == "accountSpray"):
            print("Not implimented")
    except IndexError:
        print(command + " was NOT succesfully executed due to INVALID NUMBER OF ARGUMENTS.!")
        return False

def importLastSession(sessDir):
    try:
        creds.importFile(sessDir + "credentials.txt")
    except IOError:
        print("Cannot import last session. Archived file does not exist.")


#####################################################

## Initialize Everything ##
sessionDir = "/sec/python/capstone/lastSession/"

tool = "main"
command = ""
leetsauce = """

=======================================================================================
         |         |    \          /  /       \   |           |      |          ____|
     __| |      |  |     \  /  \  /  /     |\  \  |    ____   |      |_   |     |
     ____|     _|  |      \/ /  \/  /      | \    |    ____   |      | |  |      __ |
   _|       _______|      __/   ___/     __|  \___|    _______|    _______|   ______|
=======================================================================================


"""

print('\n'*100)

print(leetsauce)
while True:
    continueLastSession = raw_input("Would you like to import the data from the last session? (y/n)")
    if continueLastSession == 'y':
        print("Starting new session from " + sessionDir)
        importLastSession(sessionDir)
        break
    elif continueLastSession == 'n':
        print("Starting new Session...")
        break
    else:
        print("That was invalid input. Try again.")


###########################
print('\n'*100)
print(leetsauce)
while(True):
    while(True):
        command = getCommand(tool)

        if tool == "main":
            validCommand, tool = executeCommand(command)
            if validCommand:
                break

        elif tool == "outlook":
            validCommand, tool = executeOutlook(command)
            if validCommand:
                break
